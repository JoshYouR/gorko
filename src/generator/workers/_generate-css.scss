/// GENERATE CSS MIXIN
/// The final CSS generator that takes the process params and generates
/// a CSS utility.
///
/// @param {string} $selector - The CSS selector that should be generated
/// @param {string} $property - The CSS property that this utility affects
/// @param {map} $items - The collection of utility items to generate classes for
/// @param {boolean} $use-css-vars - this is to tell generate-css to use either a value or a CSS Variable
/// @param {string} $item-key - the key for items which is used for tying each CSS var up to the item value
///
@import 'get-namespace';

@mixin generate-css($selector, $property, $items, $use-css-vars, $item-key, $insert-css-vars: false, $extra-css-vars-declarations: ()) {
  $var-namespace: get-namespace('css-vars');
  @if ($insert-css-vars) {
    #{'[class*=\" ' + $selector + '-\"], [class^=' + $selector + '-]'} {
      #{ $property }: #{ 'var(--' + $property + ')' };
      @each $prop, $val in $extra-css-vars-declarations {
        #{ $prop }: #{ $val };
      }
    }
  }

  @each $key, $value in $items {
    #{'.' + $selector + '-' + $key} {
      @if ($use-css-vars) {
        #{ $property }: var(--#{$var-namespace + $item-key + '-' + $key});
      } @else {
        @if ($insert-css-vars) {
          #{ '--' + $property }: #{ $value };
        }
        @else {
          #{ $property }: #{ $value };
        }
      }
    }
  }
}
